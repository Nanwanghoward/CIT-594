For extra credit. I create a method called getIndex(). It takes a ArrayList of certain word family, and its key whose binary number represents the position user guess right.
This getIndex() method not just use the size of word family ArrayList, but also the key. Because the number of letters user guess right this round will make a difference. Because user will get one more chance to guess, and more less position left in word, giving user an advantage to find a pattern.
So this method basically is designed to rule out the situation that computer returns a word family has bigger size but reveals too much positions in word. 
So that it count size * (length - count + 1) as index. size is number of word family, length is word length, count is the number of position it would reveal. For count calculation, I also list several cases, for example, if ‘i’ is in the last three letter, it will count as three letters, because it has a better chance to have a “ing” postfix. Besides, for word family larger than 30, computer will tend to choose the word family doesn’t reveal anything, since it seems to be more difficult.
Finally it returns the index for gameRound method to choose the word family which has a bigger index. 